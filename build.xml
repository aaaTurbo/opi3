<?xml version="1.0"?>
<project name="opi3"
         xmlns:if="ant:if"
         default="build">

    <property file="build.properties"/>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>

    <path id="classpath.testSource">
        <fileset dir="src/test/lib" includes="**/*.jar"/>
        <pathelement location="${target.tests}"/>
    </path>

    <target name="init">
        <mkdir dir="${target.classes}"/>
        <mkdir dir="${target.tests}"/>
    </target>

    <target name="compile" depends="init">
        <javac destdir="${target.classes}"
               srcdir="${main.source}">
        </javac>
        <echo message="Successfully compiled main sources"/>
    </target>

    <target name="build" depends="compile">
        <jar destfile="${dist.jar}" basedir="${target.classes}" compress="false" index="true">
            <manifest>
                <attribute name="Main-Class" value="ru.aaaTurbo.Main"/>
            </manifest>
        </jar>
        <echo message="Successfully built"/>
    </target>

    <target name="clean">
        <trycatch>
            <try>
                <delete dir="${target}"/>
            </try>
            <catch>
                <echo message="Couldn't clean automatically, please, check existence or access to ${target}"/>
            </catch>
        </trycatch>
        <echo message="Cleaned target"/>
    </target>

    <target name="compileTest" depends="build">
        <javac destdir="${target.tests}"
               srcdir="${test.source}">
            <classpath refid="classpath.testSource"/>
        </javac>
        <echo message="Successfully compiled tests"/>
    </target>

    <target name="test" depends="compileTest">
        <mkdir dir="${test.result.dir}"/>
        <junitlauncher printsummary="on" haltonfailure="yes">
            <classpath refid="classpath.testSource"/>
            <testclasses outputdir="${test.result.dir}">
                <fileset dir="${target.tests}" includes="**/*.class" />
                <listener type="legacy-xml" sendSysOut="true" sendSysErr="true"/>
            </testclasses>
        </junitlauncher>
        <echo message="Test completed"/>
    </target>

    <target name="native2ascii">
        <native2ascii encoding="UTF-8" src="src/main/resources" includes="*.properties" dest="${dist.dir}" />
    </target>

    <target name="scp" depends="build">
        <sshexec
                host="${host}"
                port="${port}"
                username="${remote_user}"
                password="${remote_password}"
                command="mkdir -p ${remote_dir_path}"
                trust="true" />
        <scp
                file="${dist.jar}"
                todir="${remote_user}@${host}:${remote_dir_path}"
                password="${remote_password}"
                port="${port}"/>
    </target>

    <target name="diff">
        <exec executable="git" outputproperty="vcs.git.diff_output">
            <arg value="diff" />
            <arg value="--name-only" />
        </exec>
        <condition property="vcs.git.should_commit" value="true">
            <resourcecount count="0">
                <intersect>
                    <filelist id="vcs.git.files_to_commit" files="${vcs.git.diff_output}"/>
                    <filelist files="${vcs.git.diff_files}" />
                </intersect>
            </resourcecount>
        </condition>
        <echoproperties prefix="vcs" />
        <!-- if set does not contain specified files, do commit -->
        <pathconvert property="vcs.git.files_to_commit_separated" refid="vcs.git.files_to_commit" pathsep=" " />
        <exec if:set="vcs.git.should_commit" executable="git">
            <arg value="add"/>
            <arg line="${vcs.git.files_to_commit_separated}" />
        </exec>
        <exec if:set="vcs.git.should_commit" executable="git">
            <arg value="commit" />
            <arg value="-m Feat from mzfk ant" />
        </exec>
    </target>

    <target name="team">
        <exec executable="svn">
            <arg line="update"/>
        </exec>

        <exec executable="svn" outputproperty="svn_revision">
            <arg line="info --show-item revision"/>
        </exec>

        <for list="1,2,3,4" param="offset">
            <sequential>
                <antcall target="clean"/>
                <antcall target="build"/>
                <move file="${dist.jar}" todir="${team.dir}"/>
                <move file="${team.dir}/${dist.jar.name}" tofile="${team.dir}/@{offset}.jar"/>

                <math result="svn_revision">
                    <op datatype="int" op="-">
                        <num value="${svn_revision}"/>
                        <num value="1"/>
                    </op>
                </math>
            </sequential>
        </for>

        <zip destfile="${dist.dir}/jars.zip"
             basedir="${team.dir}"/>
    </target>

</project>